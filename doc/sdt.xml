<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="">
  <title><inlinemediaobject>
      <imageobject>
        <imagedata fileref="sdt3dLogo.gif" role="" scale="15"/>
      </imageobject>
    </inlinemediaobject>The Scripted Display Tools ("sdt"/"sdt3d)"</title>

  <titleabbrev>The Scripted Display Tools ("sdt"/"sdt3d")</titleabbrev>

  <articleinfo>
    <title>The Scripted Display Tools ("sdt"/"sdt3d")</title>

    <abstract>
      <para>The Scripted Display Tools are open source software developed by
      the <ulink url="http://www.nrl.navy.mil/">Naval Research
      Laboratory</ulink> (NRL) PROTocol Engineering Advanced Networking
      (PROTEAN) group. "sdt" provides a simple 2D visualization capability
      using standard image files for a background and set of overlaid nodes.
      "sdt3d" provides a 3D visualization capability using NASA's World Wind
      3D interactive world viewer and set of overlaid nodes.  Nodes are
      assigned iconic images for the display sourced from standard format
      image files (e.g. JPEG, PNG, GIF, etc) or from 3D Model files (3ds). In
      "sdt" a custom coordinate system can be defined for the background and
      node positions can be dynamically updated to "move" their associated
      icons about the background. In "sdt3d" nodes are placed at geographic
      coordinates that can be dynamically updated to "move" their associated
      icons about the globe.  </para>

      <para>Displayed nodes can also be dynamically "linked" and "unlinked"
      with lines of user-specified color and thickness.  This makes the sdt
      tools well-suited for one of its intended purposes which is to provide a
      real-time visualization of dynamic, possibly mobile data communication
      networks.  While the sdt feature set will be centered around supporting
      this function, sdt capabilities will be left open to other creative
      uses.  Here are screenshots of <ulink url="sdt-0001.png">"sdt</ulink>"
      and "sdt3d" <ulink url="sdt3d-0001.png">(1)</ulink> <ulink
      url="sdt3d-0002.png">(2)</ulink> in action.</para>

      <para>"sdt" is written in C++ using the freely-available, cross-platform
      wxWidgets library for graphical user interface applications. "sdt3d" is
      written in Java using WorldWinds opensource JDK. Versions of the
      libraries are available for most Unix, MacOS, and Win32 platforms in a
      number of different forms.</para>
    </abstract>
  </articleinfo>

  <sect1>
    <title>Download</title>

    <para>Source code and binary distributions (Linux, Mac OS, and Windows)
    are available at:</para>

    <para><ulink
    url="http://downloads.pf.itd.nrl.navy.mil/sdt/">http://downloads.pf.itd.nrl.navy.mil/sdt/</ulink></para>

    <para>The "sdt3d" source has dependencies on NASA's Worldwind JDK,
    joglutils (a library that provides Java bindings for OpenGL and 3d Model
    support), and protolib-jni (a library that provides Java native interface
    to NRL's protolib protoPipe implementation). "sdt" is dependent on NRL's
    protolib library and wxWidgets.</para>
  </sect1>

  <sect1>
    <title>Usage</title>

    <sect2>
      <title>"sdt3d" Usage</title>

      <para>The "sdt3d" program may be launched from a command-line, the
      sdt3d.bat windows batch file, a mac application, or the Linux shell
      script sdt3d.sh. To launch "sdt3d" from the command line, use the
      following command-line syntax:</para>

      <para><programlisting>java -Xmx512m -Dsun.java2d.noddraw=true -jar sdt3d.jar</programlisting>The
      sdt3d.jar file used is available in the sdt3d binary distribution or may
      be built as described in the source code download.</para>

      <para>The "sdt3d" application can either accept <link
      linkend="real-time">real-time commands over a command pipe</link>, over
      a <link linkend="udp">UDP socket</link>, or you may use the "Open File"
      menu option to load an input file containing sdt commands.</para>

      <sect3>
        <title>File Menu</title>

        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry><para><programlisting><link id="openFile"
                      linkend="openFile">Open File...</link></programlisting></para></entry>

                <entry><para>Causes the "sdt3d" application to to parse the
                selected &lt;scriptFile&gt; containing sdt commands. This
                command will <link linkend="reset">reset</link> application
                state with the exception of any loaded sprites. Note that any
                user preference or configuration files will be reloaded. To
                clear the configuration file association use the "clear
                configuration menu item". See the <link
                linkend="inputFile">input file</link> section for more
                details.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Append file...</programlisting></para></entry>

                <entry><para>Cause the "sdt3d" application to either append
                the selected file to the input file list to be processed
                sequentially, or, if no input file is currently being
                processed, to begin processing the file immediately. Neither
                the user preferences file or the user configuration file is
                reloaded in either case.</para></entry>
              </row>

              <row>
                <entry><para><programlisting><link id="reset" linkend="reset">Reset</link></programlisting></para></entry>

                <entry><para>Cause the "sdt3d" application to reset all system
                state (exluding clearing the sprite table and clearing any
                configuration file association) and loads any user preferences
                file. Any input file processing will be halted and any
                listening sockets will be closed. The view will be reset to
                the initial view setting.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Configuration file options&gt;

  Load configuration file...

  Clear configuration</programlisting></para></entry>

                <entry><para>Loading a configuration file will reset all
                system state (with the exception of clearing the sprite table)
                and load any userPreferenceFile before processing the selected
                file. A configuration file can contain any of the sdt commands
                and will be reloaded every time sdt3d state is reset, e.g.
                after a "<link linkend="reset">reset</link>" command, when an
                <link linkend="openFile">input file is loaded via the command
                menu</link> or a pipe, or when the userConfigurationFile sdt
                command is encountered. Only one configuration file can be
                defined at a time. The clear configuration menu option will
                reset system state and load any user preferences file,
                disabling a configuration file association. </para><para>NOTE:
                Loading and clearing a configuration file will not clear the
                sprite table. Use the clear sprite menu option or use the
                "delete sprite,all" command. </para></entry>
              </row>

              <row>
                <entry><para><programlisting>KML

  Load KML file...

  Load KML URL...
_________________________________________________

  &lt;kml list&gt;
</programlisting></para></entry>

                <entry><para>Load KML files from a local file or URL
                respectively. Loaded KML files will be added to the kml list
                and to a KML panel that is displayed when the KML Panel
                checkbox is selected. Clicking on the KML entry in the KML
                panel will "fly to" the selected KML reference location. KML
                elements are added to the sdt3d KML layer.</para><para>NOTE:
                The KML standard is not fully supported at this point.
                Discovering what models fail to load successfully is an
                exercise for the reader. KML files that cannot be loaded via
                URL <emphasis>may</emphasis> load successfully when referenced
                locally.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Save a screenshot</programlisting></para></entry>

                <entry><para>Cause the "sdt3d" application to save a
                screenshot of the current display to
                &lt;fileName&gt;</para></entry>
              </row>

              <row>
                <entry><para><programlisting id="udp">Listen to UDP port.../UDP Off &lt;port&gt;
Listen to TCP port.../TCP Off &lt;port&gt;
</programlisting></para></entry>

                <entry><para>Selecting the "Listen to &lt;protocol&gt;
                port..." menu items will cause the "sdt3d" application to
                listen to the requested socket type. A popup window will
                prompt for the port to listen to and an optional (UDP only)
                multicast address. </para><para><programlisting>[&lt;addr&gt;/]&lt;port&gt;</programlisting></para><para>Once
                a socket has been successfully created the menu item will
                toggle to "&lt;protocol&gt; Off &lt;port&gt;".</para><para>If
                the application is currently listening on a socket, the menu
                item will toggle to "Off &lt;port&gt;". Selecting this menu
                item will close the socket.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Exit</programlisting></para></entry>

                <entry>Exits the "sdt3d" application</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>View Menu</title>

        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry><para><programlisting>Layer Controls&gt;

  Reset Worldwind layers

  Remove user defined layers

  Show layer panel

  Hide layer panel</programlisting></para></entry>

                <entry><para>Controls to toggle worldwind and "sdt3d" layers
                on and off.<emphasis/></para><para><emphasis>Reset Worldwind
                Layers</emphasis> will return the Worldwind specific layers to
                the default configuration. </para><para><emphasis>Remove User
                Defined Layers</emphasis> will remove all user defined object
                layer associations and layers.</para><para><emphasis>Show
                Layer Panel / Hide Layer Panel </emphasis>will toggle the
                display of the layer panel.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Bookmarks

  Bookmark this view

  Load bookmark

  Load deafult bookmarks
_________________________________________________

  &lt;bookmark list&gt;
</programlisting></para></entry>

                <entry><para>"Bookmark this view" creates a bookmark of the
                current view. Bookmarked views will be added to the bookmark
                list and can be subsequently reloaded to return to the saved
                viewpoint while the application runs.</para><para>Saving the
                view to disk will prompt the user for a view name and disk
                location. The saved file will be named &lt;viewName&gt;.xml
                and can then be subsequently reloaded via the "Load Bookmarks"
                menu item. If the view is saved to the sdt3d configuration
                directory (the default location) the view will be loaded when
                "Load default bookmarks" is invoked. Saved views are available
                until subsequently deleted. </para><para>Views saved for the
                current session will only be available until the sdt3d
                application exits.</para><para>The "Load Default Bookmarks"
                menu item will load all valid &lt;viewName&gt;.xml files
                available in the sdt3d configuration
                directory.</para><para>The "Load Bookmark" menu option will
                allow a user to load an individual &lt;viewName&gt;.xml file
                from the file system.</para><para>To load a previously saved
                or loaded view xml file, select the view from the list of
                bookmarks.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Globe&gt;

✓ Round 

  Flat Earth&gt;

    Lat/Lon

    Mercator

    Sinusoidal

    ModSinusoidal</programlisting></para></entry>

                <entry><para>Toggles the globe projection between the various
                options. This is useful when visualizing non geocentric
                data.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Status</programlisting></para></entry>

                <entry><para>Toggles the status field display on and
                off.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Elevation model</programlisting></para></entry>

                <entry><para>Toggles the elevation model on and
                off.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Stereo mode</programlisting></para></entry>

                <entry><para>Toggles analglpyh stero mode on and off. (Creates
                a stereoscopic 3D visualization effect).</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Background color</programlisting></para></entry>

                <entry><para>Changes the background color of the WWJ display.
                A popup window will prompt for the color. This is useful for
                non geocentric data visualizations particularly when the
                Worldwind layers are turned off. Color can be specified by
                name, rgb, or hex.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Collapse multiple links</programlisting></para></entry>

                <entry><para>Toggles the display of multiple links between two
                nodes on or off. Multiple links will be collapsed into a
                single link.</para></entry>
              </row>

              <row>
                <entry><para><programlisting>Apply symbol offset</programlisting></para></entry>

                <entry><para>Enabling symbol offset will center the symbol
                around the node's sprite center rather than around the actual
                node position point. (Icon images are positioned at node
                position at image center bottom and so the symbol may not
                fully "hug" the icon when symbol offset is not
                enabled.)</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Screen Controls</title>

        <para>Window controls exist between the layer panel and the worldwind
        window to collapse or expand the layer panel.</para>
      </sect3>

      <sect3>
        <title>View Controls</title>

        <para>View Control buttons are available on the bottom left corner of
        the sdt3d display:</para>

        <para><inlinemediaobject>
            <imageobject>
              <imagedata fileref="viewControls.png"/>
            </imageobject>
          </inlinemediaobject></para>

        <para>Default control keys are also available.</para>

        <para>Mouse with scroll wheel: <informaltable>
            <tgroup cols="2">
              <colspec colwidth="12*"/>

              <colspec colwidth="88*"/>

              <tbody>
                <row>
                  <entry>Pan</entry>

                  <entry>Left mouse button click &amp; drag - all
                  directions.</entry>
                </row>

                <row>
                  <entry>Zoom</entry>

                  <entry>Use the scroll wheel on the mouse or Left &amp; Right
                  mouse (both buttons) click &amp; drag - up and down.</entry>
                </row>

                <row>
                  <entry>Tilt</entry>

                  <entry>Right mouse button click &amp; drag - up and down or
                  use "Page Up" and "Page Down" on the keyboard.</entry>
                </row>

                <row>
                  <entry>Rotate</entry>

                  <entry>Right mouse button click &amp; drag - left and right.
                  Note: Crossing the top and bottom half of the screen while
                  rotating will change direction.</entry>
                </row>

                <row>
                  <entry>Stop</entry>

                  <entry>Spacebar</entry>
                </row>

                <row>
                  <entry>Reset Heading</entry>

                  <entry>Shift-N</entry>
                </row>

                <row>
                  <entry>Reset All</entry>

                  <entry>Shift-R</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>

        <para>Single button mouse: <informaltable>
            <tgroup cols="2">
              <colspec colwidth="12*"/>

              <colspec colwidth="88*"/>

              <tbody>
                <row>
                  <entry>Pan</entry>

                  <entry>Left mouse button click &amp; drag - all directions.
                  L left mouse button click once to center view.</entry>
                </row>

                <row>
                  <entry>Zoom</entry>

                  <entry>Hold "Ctrl" on the keyboard and Left mouse button
                  click &amp; drag - up and down</entry>
                </row>

                <row>
                  <entry>Tilt</entry>

                  <entry>Hold "Shift" on the keyboard and Left mouse button
                  click &amp; drag - up and down or use "Page Up" and "Page
                  Down" on the keyboard</entry>
                </row>

                <row>
                  <entry>Rotate</entry>

                  <entry>Hole "Shift" on the keyboard and Left mouse button
                  click &amp; drag - left and right</entry>
                </row>

                <row>
                  <entry>Stop</entry>

                  <entry>Spacebar</entry>
                </row>

                <row>
                  <entry>Reset Heading</entry>

                  <entry>Shift-N</entry>
                </row>

                <row>
                  <entry>Reset All</entry>

                  <entry>Shift-R</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>
      </sect3>
    </sect2>

    <sect2>
      <title>"sdt" Usage</title>

      <para>To run "sdt" with script file "script.sdt":</para>

      <programlisting>sdt input script.sdt</programlisting>

      <para>Alternatively the input script can be loaded from the file menu
      after "sdt" is invoked.</para>

      <para><anchor id="_MGEN_Script_Format"/>By default, "sdt" monitors stdin
      for commands.  The user may even type commands and manipulate the "sdt"
      display manually via sdtin, but it is generally expected that another
      process will control the "sdt" display, even to the point of providing
      very dynamic updates to produce animations. "sdt" will also accept
      commands sent over a protopipe named <emphasis>sdt</emphasis> by
      default.</para>
    </sect2>
  </sect1>

  <sect1>
    <title id="real-time"><link id="real-time" linkend="real-time">Sending
    real time commands to sdt applications.</link></title>

    <para>To send real time commands to a sdt application use the "sdtcmd"
    utility:</para>

    <para><programlisting>sdtcmd &lt;sdt commands&gt;
</programlisting></para>

    <para>The "sdtcmd" utility is available in the binary distributions or can
    be built from within the sdt source distribution.</para>

    <para>By default, sdt creates an input pipe that it monitors for sdt
    commands. The pipe is named <emphasis>sdt</emphasis> by default. It is
    generally expected that another process will control the sdt display, even
    to the point of providing very dynamic updates to produce
    animations.</para>

    <para>To send any quoted value to an sdt application via "sdtcmd", the
    string to be quoted must be enclosed in single quotes. Note that nested
    quotes are not allowed.</para>

    <para>For example:</para>

    <para><programlisting># Update the status of an sdt display
sdtcmd status "New Status Text"

# Draw a sphere around node m1-node08
sdtcmd node m1-node08 symbol sphere</programlisting></para>

    <para>To send sdt commands to an sdt instance named other than the
    default, use the instance command:</para>

    <programlisting># Send sdt commands to an sdt instance named sdt2
# and move m1-node03 to position X,Y and set the label color to cyan
sdtcmd instance sdt2 node m1-node03 position -77.005610,38.824472,0.000000 label cyan</programlisting>
  </sect1>

  <sect1>
    <title>sdt Scripts</title>

    <para>sdt scripts are text files containing a sequence of commands.
    Comments may be embedded within sdt scripts by preceding them with a '#'.
    Script files can include other scripts with the INPUT command. Script
    files included this way will be processed "in line", meaning that when the
    INPUT command is encountered within a script, all commands in the included
    script will be processed before any subsequent commands in the original
    script. Note that this is in contrast with input commands received over
    the command pipe. In this case the files will be processed
    serially.</para>
  </sect1>

  <sect1>
    <title>Configuration</title>

    <para>sdt3d configuration files are stored in the
    &lt;userHomeDir&gt;/.config/sdt3d directory. This directory will be
    created automatically upon application startup if it does not already
    exist. The application will also look for the sdt.properties file in this
    directory and create the file if it does not exist.</para>

    <sect2>
      <title os="">sdt.properties</title>

      <para>The "sdt.properties" contains a set of key-value pairs that define
      system-wide sdt properties. Currently only the userPreferencesFile
      property is supported. This key-value pair should be used to point to a
      user defined preferences file. By default this file name is set to
      sdt.settings and should be a regular text file. sdt3d will look for this
      file in the configuration file directory, as fully qualified, or as
      defined by the sdt3d file lookup rules. It is not required that the
      sdt.settings file exists.</para>

      <para><programlisting># Default sdt.properties setting
userPreferencesFile sdt.settings

</programlisting></para>

      <para>The user may override the sdt.settings filename and/or
      location:</para>

      <programlisting># The user may override the sdt.settings file name and/or location
userPreferencesFile /home/nrl/nrl-sdt.settings

</programlisting>
    </sect2>

    <sect2>
      <title>userPreferencesFile</title>

      <para>The userPreferencesFile defined in the sdt.properties file can be
      used to set overall user preferences for the sdt3d application. It may
      contain any valid sdt command and should be a regular text file. This
      file will be loaded upon system startup, whenever an input file is
      loaded, or when the system is reset. In this sample file, a default
      search path is specified and the application is directed to start
      listening on tcp port 5000.</para>

      <para><programlisting>#######################################################################
#
#  settings.sdt
#
#  Use this file to define user preferences
#
#######################################################################


path "examples/;examples/sprites/;../examples/;../examples/sprites/;/Users/ljt/Projects/sdt/examples/sprites;/Users/ljt/Desktop/demo/dc-models;"

listen tcp,5000
status "Listening to tcp port 5000"
</programlisting></para>
    </sect2>

    <sect2>
      <title><link id="userConfigurationFile"
      linkend="???">userConfigurationFile</link></title>

      <para>A "user configuration file" can be defined that associates a sdt
      script file that will be loaded every time a new sdt input script is
      loaded via the menu option, when the system command
      "userConfigurationFile" is encountered in a sdt command sequence, or
      when the system is reset. This file can contain any valid sdt commands
      and should be a regular text file. It can be used, for example, to
      define sdt configurations particular to a common set of scenarios or
      run-time operations (e.g. sprite types, terrain overlays, elevation
      overlays). By default the application will look for this file in the
      configuration directory, as fully qualified, or as defined by the sdt3d
      file lookup rules.</para>

      <para>The configuration file menu options or the userConfigurationFile
      command can be used to clear a userConfigurationFile association or
      associate a different userConfigurationFile. Note that loading a
      userConfigurationFile from the menu will cause the application
      to:</para>

      <itemizedlist>
        <listitem>
          <para>stop reading any input file</para>
        </listitem>

        <listitem>
          <para>clear all system state with the exception of the sprite
          table</para>
        </listitem>

        <listitem>
          <para>reload any userPreferencesFile</para>
        </listitem>

        <listitem>
          <para>load configuration file</para>
        </listitem>
      </itemizedlist>

      <para>whereas loading a configuration file via the userConfigurationFile
      command will</para>

      <itemizedlist>
        <listitem>
          <para>associate the file to be loaded upon subsequent system reset
          events or when an input script is loaded via the menu command</para>
        </listitem>

        <listitem>
          <para>load configuration file</para>
        </listitem>
      </itemizedlist>

      <para>NOTE: If the configuration file is being used to change sprite
      types, use the "delete sprite,all" command to clear the sprite
      table.<programlisting>#######################################################################
#
#  userConfigurationFile.sdt
#
#  Use this file to define user configurations, e.g. sprites, overlays
#
#######################################################################

delete sprite,all

sprite uav image uav.png size 72,20
sprite helo image helo.png size 105,43
sprite truck image vehicle.gif size 79,73

# Set the background boundary coordinates
bgbounds -77.028633,38.828533,-77.003298,38.817720


# Load itmOverlay tile
tile radarOverlay tileImage itmOverlay.png sector -77.083194,38.895139,-76.969306,38.778750</programlisting></para>
    </sect2>

    <sect2>
      <title>File load sequence</title>

      <para>When an input file is loaded via the menu option the application
      will:</para>

      <itemizedlist>
        <listitem>
          <para>stop reading any input file</para>
        </listitem>

        <listitem>
          <para>clear all system state with the exception of the sprite
          table</para>
        </listitem>

        <listitem>
          <para>reload any userPreferencesFile</para>
        </listitem>

        <listitem>
          <para>load configuration file</para>
        </listitem>
      </itemizedlist>

      <para>When an inputFile command is embedded within a sdt script the
      application will:</para>

      <itemizedlist>
        <listitem>
          <para>immediately process the input file in its entirety before the
          next command in the containing script or command sequence</para>
        </listitem>
      </itemizedlist>

      <para>Similarly, when an inputFile command is received over a pipe the
      application will:</para>

      <itemizedlist>
        <listitem>
          <para>process the file in its entirety before any other commands
          received over the pipe are processed</para>
        </listitem>
      </itemizedlist>

      <para>When a configuration file is loaded via the menu option the
      application will:</para>

      <itemizedlist>
        <listitem>
          <para>stop reading any input file</para>
        </listitem>

        <listitem>
          <para>clear all system state with the exception of the sprite
          table</para>
        </listitem>

        <listitem>
          <para>reload any userPreferencesFile</para>
        </listitem>

        <listitem>
          <para>load the specified configuration file</para>
        </listitem>
      </itemizedlist>

      <para>Clearing a configuration file via menu option will:</para>

      <itemizedlist>
        <listitem>
          <para>stop reading any input file</para>
        </listitem>

        <listitem>
          <para>clear all system state with the exception of the sprite
          table</para>
        </listitem>

        <listitem>
          <para>reload any userPreferencesFile</para>
        </listitem>

        <listitem>
          <para>disable any configuration file association</para>
        </listitem>
      </itemizedlist>

      <para>Clearing a configuration file via a sdt "userConfigurationFile
      none" command will:</para>

      <itemizedlist>
        <listitem>
          <para>simply disable any configuration file association</para>
        </listitem>
      </itemizedlist>

      <para>Appending a file via the "append file" menu option will process
      the designated file after any currently loading script is
      completed.</para>
    </sect2>

    <sect2>
      <title>Clearing the sprite table</title>

      <para>As loading sprites can be time consuming the sprite table will not
      be cleared upon each script load. The sprite table can be cleared as
      follows:</para>

      <itemizedlist>
        <listitem>
          <para>when the clear sprite table menu item is invoked</para>
        </listitem>

        <listitem>
          <para>via the "delete sprite,all" the "delete all,all", or the
          "clear sprite,all" commands. (Note that "clear all,all" does NOT
          delete the sprite table.</para>
        </listitem>
      </itemizedlist>

      <para>NOTE: If a given named sprite definition already exists in the
      application, it will not be reloaded when a duplicate sprite definition
      is encountered. (Assuming the image associated with the sprite type
      remains the same.) This will reduce system processing when configuration
      files are used to define sprite types. Any new or changed attributes
      will be applied to the sprite, but not to any nodes associated with the
      sprite.</para>
    </sect2>
  </sect1>

  <sect1 id="sdtcommands">
    <title>sdt Commands</title>

    <para>The sdt command set is made up of key-value pairs separated by white
    space. Simpler commands (such as commands to control the background, or
    the WAIT command) are simple key-value pairs. In some cases the value of
    simple commands may be a comma-delimited list. More complex commands are
    made up of "objects" (e.g. node, link, sprite) and their "options" (e.g.
    position, color). "Options" may also have a comma-delimited set of
    attributes. Options are exclusive to an object type.</para>

    <para>The basic grammar is as follows:</para>

    <para><programlisting>&lt;key&gt; [&lt;value&gt;]</programlisting><programlisting>&lt;objectType&gt; &lt;objectName&gt; [&lt;option&gt; &lt;attributeList&gt;]</programlisting>An
    option's attribute list need not be fully qualified, but elements omitted
    <emphasis>within</emphasis> a list should be set to "X" to indicate "use
    the default value or the last attribute assigned". For example, the
    default attribute list for a symbol option has the following
    defaults:<programlisting># color = red
# outline thickness = 3
# x_radius = radius of sprite
# y_radius = radius of sprite
# opacity = 0.15
#symbol &lt;symbolType&gt;[,&lt;color&gt;,[&lt;thickness&gt;[,&lt;x_radius&gt;[,&lt;y_radius&gt;[,opacity]]]]
</programlisting></para>

    <para>To draw a blue sphere centered around node and sized to the node's
    sprite with a 15% opacity, the following command may be used:</para>

    <para><programlisting>node node01 symbol sphere,blue</programlisting></para>

    <para>To alter the opacity of the sphere to 95% opacity, in a subsequent
    command:</para>

    <programlisting>node node01 symbol sphere,X,X,X,X,0.95</programlisting>

    <para>To increase the size of the sphere to 300 meters, retaining other
    attributes (e.g. color blue, 95% opacity):</para>

    <para><programlisting>node node01 symbol sphere,X,X,300,X,X</programlisting></para>

    <para><emphasis role="bold"><emphasis>To turn the symbol red, 300 meters
    wide, 95% opacity:</emphasis></emphasis></para>

    <para><programlisting>node node01 symbol sphere,red,X,X,X,X</programlisting><emphasis
    role="bold"/></para>

    <sect2>
      <title os="">sdt Objects</title>

      <para>The set of sdt "objects" includes: sprite, node, region, link,
      tile, kml, view, and popup. The name associated with an object can be
      any string, with the exception of the link command which must be made up
      of valid node names being "linked" e.g. "link node01:node02". (See below
      for more detail on the command).</para>

      <para>Some sdt "objects" may have other "objects" as options. For
      example:</para>

      <para><programlisting># Define a sprite type
sprite truck image truck.png size 52,25

# Now define a node and associate it with the sprite "truck"
node node-01 type truck </programlisting></para>

      <para>If an object with the associated object name already exists, the
      previously defined object will be used and any attribute changes will be
      made to the previously defined object. For example:</para>

      <programlisting># Define a node
node node-01 type truck label blue

# Set the position of node-01, all other attributes remain the same
node node-01 position -77.025146,38.822059</programlisting>

      <para>sdt "objects" can be deleted with the delete
      &lt;objectType&gt;,&lt;name&gt; command. Note that delete
      &lt;objectType&gt;,all will delete all the objects of the specified
      type.</para>

      <programlisting># Delete node node-01
delete node,node-01

# Delete all nodes
delete node,all </programlisting>
    </sect2>

    <sect2>
      <title><link id="layers" linkend="layers">User Defined
      Layers</link></title>

      <para>In addition to Worldwind and the default sdt layers that can be
      toggled on and off, "sdt3d" supports the creation of "User Defined"
      layers. A limited set of sdt "objects" and "attributes" can be
      associated with these layers; the set includes nodes, symbols, labels,
      links, regions, and tiles. "User Defined" layers are placed
      automatically in the layer so named.</para>

      <para>The "layer" command will create an empty "User Defined" layer that
      can then be subsequently associated with objects, e.g. the
      command:<programlisting>layer "NRL Layer"</programlisting>will create a
      checkbox associated with a layer called "NRL Layer" under the "User
      Defined" section on the layer panel. Objects are assigned to user
      defined layers via the &lt;objectType&gt;Layer attribute. For
      example:<programlisting>node node1 nodeLayer "NRL Layer"</programlisting>will
      assign the node named "node1" to the user defined layer "NRL Layer".
      When "NRL Layer" is toggled on and off, the display of "node1" and all
      its associated attributes (label, symbol, sprite, links) will be toggled
      on and off. Likewise,<programlisting>node node2 symbol sphere symbolLayer "NRL Layer"</programlisting>will
      assign node2's symbol to the "NRL Layer". Toggling the "NRL Layer" then,
      will toggle node1 and all its attributes and the display of node2's
      symbol. Once an element of a node has been assigned to a user defined
      layer, the node itself cannot then be subsequently assigned to another
      layer. Likewise, once a node is assigned to a layer, none of it's
      elements may then be assigned to another layer.</para>

      <para>By default the layer will be turned "on" when initially specified.
      Layers can be toggled on and off via the on-off attribute. The layer
      on-off attribute defaults to on:<programlisting>layer &lt;layerName&gt;[,on|off]</programlisting></para>

      <para><emphasis role="bold">Note:</emphasis> The layer command need not
      be used. "User Defined" layers will be created automatically when
      &lt;object&gt;Layer commands are used if they layer has not already been
      created.<programlisting>node node2 nodeLayer "NRL Layer"</programlisting>Layers
      can also be nested. Use double colons to indicate nested
      layers:<programlisting>node node3 nodeLayer "NRL Layer::Links::wifi
node node3 nodeLayer "NRL Layer::Links::ethernet</programlisting><emphasis
      role="bold">Note:</emphasis> When using "nested" layers, sdt objects may
      only be assigned to the tree "leafs". E.g. in the above example sdt
      objects may only be assigned to the "wifi" or the "ethernet" layers.
      Nested layers must be fully specified when assigned to sdt objects, or
      when the layer is toggled on or off e.g.<programlisting>node node4 nodeLayer "NRL Layer::Links::wifi"

layer "NRL Layer::Links::wifi,off</programlisting>Layer names need not be
      unique when nested. <emphasis role="bold">NOTE: </emphasis>If an element
      has been assigned to a layer, further nested layers cannot be
      assigned.</para>
    </sect2>

    <sect2>
      <title>sdt Colors</title>

      <para>Valid "sdt3d" named colors are black, white, yellow, green, blue,
      cyan, red, pink, orange, magenta, purple, and gray. Other colors can be
      specified by their rgb or hex values. For example:</para>

      <programlisting># Set sphere color to named color "red"
node node1 symbol sphere,red

# Set sphere color to red rgb value
node node1 symbol sphere,255:0:0

#Set sphere color to red hex value 
node node1 symbol sphere,0xff0000</programlisting>
    </sect2>

    <sect2>
      <title>Background Commands</title>

      <para>These commands control the display of the sdt background:</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>bgimage &lt;imageFile&gt;</para></entry>

              <entry><para>The indicated &lt;imageFile&gt; is used as the
              background image in the sdt display.  A number of standard image
              formats are supported.  Note the use of a background image is
              optional. (<emphasis>"sdt" only</emphasis>)</para></entry>
            </row>

            <row>
              <entry><para>bgbounds
              &lt;left&gt;,&lt;upper&gt;,&lt;right&gt;,&lt;lower&gt;</para></entry>

              <entry><para>Sets the background boundary coordinates. In
              "sdt3d" the display will pan to the center of these
              latitude/longitude coordinates.</para></entry>
            </row>

            <row>
              <entry><para>bgscale &lt;factor&gt;</para></entry>

              <entry><para>The size of the background is proportionally scaled
              according to the given &lt;factor&gt; value.  Any positive
              floating point value may be used. (<emphasis>"sdt"
              only</emphasis>)</para></entry>
            </row>

            <row>
              <entry><para>bgsize &lt;width&gt;,&lt;height&gt;</para></entry>

              <entry><para>The background image is scaled to the size
              specified by the &lt;width&gt; and &lt;height&gt; parameters.
               If one of the parameters is less than zero, the image's aspect
              ratio is preserved and the image is scaled to match its
              corresponding dimension to the non-zero parameter given.
              ("<emphasis>sdt" only)</emphasis></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para/>
    </sect2>

    <sect2>
      <title id="sprite">Sprite Commands</title>

      <para>These commands are used to define a set of sprites (icons) and
      their characteristics:</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>sprite &lt;spriteName&gt;</para></entry>

              <entry><para>This creates a new sprite instance of name
              &lt;spriteName&gt; or addresses a previously created sprite
              instance for application of other Sprite Commands (i.e. image,
              scale, size).  The default "size" of a new sprite is 32x32
              pixels.</para></entry>
            </row>

            <row>
              <entry><para>image &lt;imageFile&gt;</para></entry>

              <entry><para>This assigns the &lt;imageFile&gt; given to be
              displayed for nodes of the given sprite type. (e.g. "sprite Car
              image car.png"). When an image for the sprite is specified, the
              image is scaled such that the smallest dimension (width or
              height) equals the minimum dimension of the sprite (32 by
              default).</para><para>3D Models and KML Models can also be
              associated with sprite images. Note that KML Models
              <emphasis>must</emphasis> have the model id attribute set to
              "model-1". See the <link linkend="sprite-kml-models">Sprite KML
              Models</link> section for more information specific to kml
              sprite types.</para><para>sdt will first attempt to open the
              imageFile as specified e.g. as fully qualified, relative to the
              current directory, or in the current directory. If not found, it
              will search for the file in any path(s) previously specified
              with the sdt PATH command. Finally, it will look for the file in
              the same directory as the current input script (if any. "sdt3d"
              only)</para><para>Note that changing the sprite's image will not
              change the image of nodes already assigned the sprite. Future
              nodes assigned to the sprite, however, will be associated with
              the new image. </para></entry>
            </row>

            <row>
              <entry><para>scale &lt;factor&gt;</para></entry>

              <entry><para>The size of the sprite and its associated image (if
              given) is proportionally scaled according to the given
              &lt;factor&gt; value.  Any positive floating point value may be
              used. </para><para>Note that changing the sprite's scale factor
              will only be applicable to future nodes assigned to the
              sprite.</para></entry>
            </row>

            <row>
              <entry><para>size &lt;width&gt;,&lt;height&gt;</para></entry>

              <entry><para>This assigns width and height sizes to the given
              sprite. The dimensions are in pixels for image files and meters
              for 3D Models.  If an image is already specified, the image is
              scaled to directly match the given dimensions. If one of the
              parameters is less than zero, the image's aspect ratio is
              preserved and the image is scaled to match its corresponding
              dimension to the non-zero parameter given. Either length or size
              can be set for 3D sprites but not both. The size attribute takes
              precedence over the length attribute if both are set and length
              will be set to the given width.</para></entry>
            </row>

            <row>
              <entry><para>light [on|off]</para></entry>

              <entry><para>Controls whether "sdt3d" should apply lighting to a
              3D sprite. By default, lighting is disabled. Check the 3D
              model's attributes to determine the correct setting. Note that
              the last light setting will be applied to all sprites that
              reference the 3ds model.</para></entry>
            </row>

            <row>
              <entry><para>length &lt;lengthInMeters&gt;</para></entry>

              <entry><para>Sets a length in meters for 3D sprites. Either
              length or size can be specified but not both. The size attribute
              takes precedence over the length attribute if both are set and
              length will be set to the given width.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Note that in Linux environments the names of the 3ds texture files
      must be the same case as the file name in the 3ds file, otherwise
      texture will not be applied to the model.</para>

      <sect3>
        <title id="sprite-kml-models">Sprite KML Models</title>

        <para>Sprites can be associated with both kmz and kml files.
        <programlisting>sprite walkingMan image 3D_Man_Walking.kmz scale 15

sprite crowd image crowd/doc.kml scale 10</programlisting>kmz files are zipped
        files containing all the files necessary to render a model. If the kml
        model is not compressed, the doc.kml file describing the model and
        it's associated files will be located in a directory.</para>

        <para><inlinemediaobject>
            <imageobject>
              <imagedata fileref="kml-files.png"/>
            </imageobject>
          </inlinemediaobject></para>

        <para>The kml file (the doc.kml file in either the kmz file or the kml
        directory) describing the model <emphasis>must</emphasis> have the
        model id attribute set to "model-1". Many kml models already are
        assigned this identifier, but if not, the kml file should be edited so
        that the model id is set correctly, e.g.<programlisting>&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;kml xmlns='http://earth.google.com/kml/2.1'&gt;
&lt;Folder&gt;
    &lt;name&gt;crowd&lt;/name&gt;

[snip]

&lt;Placemark&gt;
    &lt;name&gt;Model&lt;/Name&gt;
    &lt;description&gt;&lt;![CDATA]]&gt;&lt;/description&gt;
    &lt;Style id='default'&gt;
    &lt;/Style&gt;
    &lt;Model id="model-1"&gt;<inlinegraphic fileref="modelCallout-1.png"/>
        &lt;altitudeMode&gt;relatvieToGround&lt;/altitudeMode&gt;

[snip]

&lt;/Model&gt;
&lt;/Placemark&gt;
&lt;/Folder&gt;
&lt;/kml&gt;</programlisting></para>
      </sect3>
    </sect2>

    <sect2>
      <title id="node">Node Commands</title>

      <para>These commands are used to instantiate nodes, assign an image to
      them, and set their position and other characteristics:</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>node &lt;nodeName&gt;</para></entry>

              <entry><para>This creates a new node instance of name
              &lt;nodeName&gt; or addresses a previously created node instance
              for application of other Node Commands (i.e. type, position,
              label).  Multiple Node Commands may be given following the "node
              &lt;nodeName&gt; specification.  By default, the first sprite in
              the sdt sprite list is assigned to the node.<emphasis
              role="bold"/></para></entry>
            </row>

            <row>
              <entry><para>type &lt;spriteName|none&gt;</para></entry>

              <entry><para>This assigns the sprite of the indicated
              &lt;spriteName&gt; as the image used to represent the specified
              node on the sdt display (e.g. "node Alpha type Car".  A special
              reserved &lt;spriteName&gt; of "none" is used to indicate the
              specified node should not be displayed.<emphasis
              role="bold"/></para><para><emphasis role="bold"><emphasis>By
              default, the first sprite in the sdt sprite list is assigned to
              a node. Specify type "none" to disable the assignment of a
              default sprite type.</emphasis></emphasis></para></entry>
            </row>

            <row>
              <entry><para>position
              &lt;x&gt;,&lt;y&gt;[,&lt;z&gt;],[{c|g}],[{msl|agl}]]</para></entry>

              <entry><para>This command is used to specify the current
              position (and altitude if specified) of the given node.  The
              &lt;x&gt; attribute assigns longitude, the &lt;y&gt; attribute
              assigns latitude, and the optional &lt;z&gt; attribute sets
              altitude.</para><para>If no altitude is specified, the node will
              be positioned at terrain elevation in "sdt3d". Altitude is not
              useful in "sdt2d" and will be ignored. </para><para>The
              coordinates can be specified in either the geodesic or cartesian
              coordinate system. Geodesic is the default. Cartesitan
              coordinates will be relative to the geodesic position 0,0,0
              unless the origin command is used. All cartesian coordinates
              specified after an <link linkend="origin">origin</link> command
              has been set will be offset from the geodesic
              origin.</para><para><programlisting># Position node at geodesic coordinates
node node1 pos -77.005217,38.819009,0

# Explicitly position node at geodesic coordinates
node node1 pos -77.005216,38.819009,0,g

# Position node at cartesian coordinates 
# Origin defaults to geodesic coordinate 0,0,0
node node1 position 0,0,0,c

# Position node at cartesian coordinates relative to 
# geodesic origin position
origin -77.005610,38.830373,0.000000
node node1 position 10,10,0,c</programlisting></para><para>Any altitude
              specified will position the node at AGL by default (e.g.
              distance above ground level) or at the default altitude assigned
              by the <link
              linkend="defaultAltitudeType">defaultAltitudeType</link>
              command. The "agl" or "msl" attributes will override the
              default, and position the node at the given elevation above
              ground level or at mean sea level respectively. To retain the
              last assigned elevation set the altitude to "X",
              e.g.</para><programlisting># set altitude to 300 meters agl (default)
node node1 position -77.005217, 
38.819009,300.000000

# change the location, retain the 
# previously specified altitude
node node1 position -77.005217,38.820009,x

# position the node at agl
node node1 position x,x,x,agl

# Position node2 at terrain elevation (default)
node node2 position -77.005217,38.820009

or

node node2 position -77.005217,38.820009,0</programlisting><para>Note that any
              nodes positioned below mean sea level will be positioned at seal
              level for this release of "sdt3d".</para><para>Note that in sdt
              2D the coordinates are in units of the coordinate system defined
              by the bgbounds commands. </para></entry>
            </row>

            <row>
              <entry><para>label
              on|&lt;color&gt;|off,[,&lt;text&gt;]</para></entry>

              <entry><para>This indicates whether or not a text label should
              be displayed for the indicated node.  By default, a cyan label
              using the node's name is displayed below the node's sprite
              image. </para><para>To hide the label for a node use the command
              </para><para><programlisting>node &lt;nodeName&gt; label off</programlisting></para><para>The
              label can be enabled with either the "on" command or by
              specifying a color, e.g. (Note the color can be specified by
              name, rgb, or hex.</para><para><programlisting>node &lt;nodeName&gt; label on,&lt;text&gt;</programlisting></para><para><programlisting>node &lt;nodeName&gt; label blue,&lt;text&gt;</programlisting>Label
              text that contains spaces or formatting characters must be
              enclosed in quotes e.g.</para><para><programlisting>node &lt;nodeName&gt; label blue,"Label text"</programlisting></para></entry>
            </row>

            <row>
              <entry>symbol
              &lt;symbolType|none&gt;[,&lt;color&gt;,[&lt;thickness&gt;[,&lt;x_radius&gt;[,&lt;y_radius&gt;[,&lt;opacity&gt;[,&lt;scale&gt;]]]]]</entry>

              <entry>This is used to put a symbol around the node. Valid "sdt"
              symbol types are: circle, ellipse, square, rectangle,
              rndrectangle (rounded rectangle), rndsquare (rounded square),
              and none. Valid "sdt3d" symbol types are sphere, ellipse, and
              cube. By default there is no symbol associated with a
              node.<para/>The sphere symbol will be sized to fit the maximum
              dimention of the sphere. The ellipse symbol will be sized to the
              height and width of the sprite. (If no sprite is associated with
              the node, a symbol may still be associated that will default to
              the default sprite size of 32x32). The default symbol color is
              "red". Colors are specified by name, and a large color set is
              supported. See the wxWidgets documentation for the "sdt" color
              set until this user's guide is further revised. Valid "sdt3d"
              named colors are white, yellow, green, blue, cyan, red, pink,
              orange, magenta, purple, and gray. Other colors can be specified
              by their rgb or hex values.<para>NOTE: Symbols cannot yet be
              sized to KML sprite types. Such symbols will resolve to the
              default sprite size of 32x32 or any x_radius/y_radius dimensions
              specified.</para>The x_radius parameter sets the radius for
              "sdt" circles and "sdt3d" symbols. If a y_radius is provided,
              the radius will be set to the maximum of the x_radius or
              y_radius. They allow the symbol to represent a real circle of
              given radius in the coordinate system. This could be useful for
              showing radio range, for instance. This should be given in the
              same units as those of the coordinate system defined by the
              bgbounds commands or in meters in the "sdt3d" app. As such, the
              size of the circle will increase as you zoom in, and decrease as
              you zoom out. <para>The x_radius will define the width of a cube
              symbol, the y_radius will define the height.</para><para>The
              opacity parameter is only available in "sdt3d" and will set the
              opacity of the interior of the symbol. By default the symbol is
              drawn at opacity .15</para><para>The scale parameter is only
              applicable to icon hugging symbols. </para><para>If any
              parameter within the parameter list is omitted, specify a "X"
              value to use the defaults. See the <link
              linkend="sdtcommands">sdt Commands</link> section for more
              information on attribute lists. For example to draw a sphere
              based on the size of the sprite at a .50
              opacity:</para><para><programlisting>symbol sphere,blue,X,X,X,0.50</programlisting></para>In
              "sdt" the circle is drawn as an ellipse so that if you change
              the aspect ratio with scaling or Ctrl-A, it will flatten out,
              though it still represents a perfect circle in your coordinate
              system. You are also allowed to specify x and y radii, in case
              your coordinate system does not use the same unit on both axes
              (lat/lon, for instance). If only one radius is given, then the x
              and y radii will be the same, and the symbol will appear
              circular until you change one of the scales independently from
              the other or use Ctrl-A (zooming scales both x and y axes
              together, so that is not a problem).<para><emphasis
              role="bold"/></para></entry>
            </row>

            <row>
              <entry>nodeLayer &lt;layerName&gt;| symbolLayer
              &lt;layerName&gt; | labelLayer &lt;layerName&gt;</entry>

              <entry>Assigns the node, the node's symbol, or the node's label
              to the given layerName. When a node is assigned to a layer all
              it's attributes (e.g. symbol, label) will be likewise assigned.
              For example, if a node is assigned to layer X, the node and all
              its attributes will toggle on and off as layer X is toggled on
              and off. Once a node is assigned to a layer it's attributes
              cannot be subsequently assigned. If the layer does not already
              exist it will be created. See the <link
              linkend="layers">layer</link> section for more
              information.</entry>
            </row>

            <row>
              <entry><para>delete node,&lt;nodeName&gt;</para><para/></entry>

              <entry><para>This command deletes the specified node and any
              links associated with it. <emphasis>Note that the legacy delete
              &lt;nodeName&gt; command is still
              supported.</emphasis></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para/>
    </sect2>

    <sect2>
      <title id="region">Region Commands</title>

      <para>These commands ("sdt3d" only) are used to instantiate regions, and
      set their position and other characteristics:</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>region &lt;regionName&gt;</para></entry>

              <entry><para>This creates a new region of name
              &lt;regionName&gt; or addresses a previously created region for
              application of other region Commands (i.e. shape, position).
              </para></entry>
            </row>

            <row>
              <entry><para>shape
              &lt;regionShape|none&gt;[,&lt;color&gt;[,&lt;thickness&gt;[,&lt;x_radius&gt;[,&lt;y_radius&gt;[,&lt;opacity&gt;]]]]</para></entry>

              <entry><para>This assigns the indicated &lt;regionShape&gt; to
              the region (e.g "region region1 shape circle"). Valid
              regionShapes are circle,sphere,square,cube, rectangle, box, and
              none. Circle, square, and rectangle regions are "surface shapes"
              meaning they will overlay the terrain surface, whereas spheres,
              cubes, and boxes are 3gl objects that will be centered at the
              position set with the center attribute.</para><para>The default
              region color is "grey", the default outline thickness is one,
              the default size is 300 x 300 meters, and the default opacity is
              15%. Colors are specified by name, The named color set includes
              black, white, yellow, green, blue, cyan, red, pink, orange,
              magenta, purple, and gray. Other colors can be specified by
              their hex or rgb values.</para><para>The x_radius argument can
              be used to set the width of the region in meters. The y_radius
              argument sets the height in meters. Setting the region elevation
              to 0 will position any 3d regions bottomed at terrain. "Surface
              shape" regions are always overlayed on the terrain.<emphasis
              role="bold"/></para></entry>
            </row>

            <row>
              <entry><para>center
              &lt;x&gt;,&lt;y&gt;[,&lt;alt&gt;][,&lt;c,g&gt;]</para></entry>

              <entry><para>This command is used to specify the current
              position of the region.  In sdt2d the coordinates are in units
              of the coordinate system defined by the bgbounds commands. In
              sdt3d the units may be in either geodesic or cartesian
              coordinates. Geodesic is the default. Cartesian coordinates will
              be relative to any <link linkend="origin">origin</link> geodesic
              position specified. Altitude is only relevant for spheres and
              cubes.</para></entry>
            </row>

            <row>
              <entry>regionLayer &lt;layerName&gt;</entry>

              <entry>Assigns the region to the given layerName. If the layer
              does not already exist it will be created. See the layer section
              for more information.</entry>
            </row>

            <row>
              <entry><para>delete region,&lt;regionName&gt;</para></entry>

              <entry><para>This command removes the specified region.
              <emphasis role="bold"/></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title id="link">Link Commands</title>

      <para>These commands are used to define (and undefine) "links" (drawn as
      lines) between pairs of previously defined nodes. Note that the
      deprecated link syntax is still supported in the current versions of
      "sdt"/"sdt3d". <emphasis role="bold"/></para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>link
              &lt;node1&gt;,&lt;node2&gt;[,&lt;linkID|all&gt;[,&lt;dir,all&gt;]]]</para></entry>

              <entry><para>This indicates that a "link" (drawn line) should be
              managed and displayed for the given pair of
              nodes.</para><para>The optional linkID can be used to create
              multiple links between the node pairs, e.g.<programlisting>link node-01,node-02,eth1

link node-01,node-02,wifi</programlisting></para><para>The dir attribute will
              create a "uni-directional" link between the two nodes with an
              arrow anchored on the target node. For
              example:</para><programlisting># arrow anchored on node-02
link node-01,node-02,wifi,dir
</programlisting><para>A new bi-directional link will delete any existing
              uni-directional links between the two nodes that have the same
              link id. A new uni-directional link deletes an existing
              bi-directional link between the same nodes. If such a link was
              present, then the new command will create an additional
              uni-directional link in the opposite direction if so indicated.
              For example:</para><programlisting># Creates a uni-directional link between
# nodes 1 and 2 with an arrow anchored on
# node 2
link 1,2,wifi,dir line blue,3 linklabel on 

# Creates a second uni-directional link 
# between nodes 1 and 2 with an arrow 
# anchored on node 1
link 2,1,wifi,dir line yellow,3 linklabel on

# Deletes existing uni-directional links
# and creates a single bi-directional
# (arrowless) link
link 2,1,wifi line red,3 linklabel on  

# Deletes existing bi-directional link and
# creates a uni-directional link with an
# arrow anchored on node 2
link 1,2,wifi,dir line red,3, linklabel on
</programlisting><para>The optional linkID "all" keyword can be used to refer
              to all linkIDs between the two nodes. By default only
              bidirectional links will be referenced, the default when the
              directional keyword "dir" is omitted. To reference the set of
              all directed links specify the "dir" directional keyword, or the
              "all" keyword to reference all directed and bidirectional links.
              For example:</para><programlisting># reference the set of all bi-directional
# links regardless of linkId
link 1,2,all

# reference the set of all uni-directional 
# links
link 1,2,all,dir 

# reference the set of all bi and 
# uni-directional links
link 1,2,all,all

# reference the set of all links associated 
# with linkid wifi
link 1,2,wifi,all</programlisting>Note that linkids may not be valid sdt
              colors due to legacy link command support.</entry>
            </row>

            <row>
              <entry><para>line color[,&lt;thickness&gt;]]</para></entry>

              <entry><para>The color and thickness (1-8) of the line drawn can
              be optionally specified. The default color is "red" and the
              default thickness is 1.  Colors can specified by name, rgb, or
              hex value.  See the wxWidgets documentation for the "sdt" color
              set. Valid "sdt3d" named colors are white, yellow, green, blue,
              cyan, red, pink, orange, magenta, purple, and gray.<emphasis
              role="bold"/></para></entry>
            </row>

            <row>
              <entry><para>linklabel
              on|&lt;color&gt;|off,[,&lt;text&gt;]</para></entry>

              <entry><para>This indicates whether or not a text label should
              be displayed for the indicated link.  When turned on with no
              associated text, a label the color of the link and containing
              the link's name is created and will be displayed when the link
              label layer is turned on (the link label layer is not initially
              displayed by default). If no linklabel command is specified for
              the link, no linklabel is created. Note that the link line color
              must be defined before the linklabel in order to default the
              label color to the link line color.</para><para>To hide the
              label for a link use the command</para><para><programlisting>link &lt;linkName&gt; linklabel off</programlisting></para><para>Alternatively,
              the linklabel layer can be toggled on and off with the link
              labels radio button.</para><para>The linklabel can be enabled
              with either the "on" command or by specifying a color,
              e.g.</para><para><programlisting>link &lt;linkName&gt; linklabel on
link &lt;linkName&gt; linklabel on,&lt;text&gt;
link &lt;linkName&gt; linklabel blue 
link &lt;linkName&gt; linklabel blue,&lt;text&gt;</programlisting></para><para><emphasis
              role="bold"/></para></entry>
            </row>

            <row>
              <entry>linkLayer &lt;layerName&gt;</entry>

              <entry>Assigns the link to the given layerName. If the layer
              does not already exist it will be created. See the layer section
              for more information.</entry>
            </row>

            <row>
              <entry><para>delete
              link,&lt;node1&gt;,&lt;node2&gt;[,&lt;linkID&gt;]</para><para/></entry>

              <entry><para>This command causes a "link" previously specified
              to be no longer displayed for the given node pair.  If the node
              pair is later again linked, any non-default color or thickness
              attributes will need to be re-specified.</para><para>To delete
              all links between a node pair set the linkId to
              "all":<programlisting>delete link,node01,node02,all</programlisting><emphasis>Note
              that the legacy unlink command is still supported unlink
              &lt;node1&gt;,&lt;node2&gt;[,&lt;linkID&gt;]</emphasis></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para/>

      <sect3>
        <title id="deprecated-link-cmd">Link Commands - Deprecated</title>

        <para>These commands are used to define (and undefine) "links" (drawn
        as lines) between pairs of previously defined nodes.</para>

        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry><para>link
                &lt;node1&gt;,&lt;node2&gt;[,&lt;color&gt;[,&lt;thickness&gt;]]</para></entry>

                <entry><para>This indicates that a "link" (drawn line) should
                be managed and displayed for the given pair of nodes.  The
                &lt;color&gt; and &lt;thickness&gt; (1-8) of the line drawn
                can be optionally specified using the indicated format.  The
                default color is "red" and the default thickness is 1.  Colors
                are specified by name, and a large color set is supported.
                 See the wxWidgets documentation for the color set until this
                user's guide is further revised.</para></entry>
              </row>

              <row>
                <entry><para>unlink &lt;node1&gt;,&lt;node2&gt;</para></entry>

                <entry><para>This command causes a "link" previously specified
                to be no longer displayed for the given node pair.  If the
                node pair is later again linked, any non-default color or
                thickness attributes will need to be
                re-specified.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para/>
      </sect3>
    </sect2>

    <sect2>
      <title id="geoTiff">geoTIFF Commands ("sdt3d" only)</title>

      <para>The geoTiff command causes the specified geoTiff elevation or
      image overlay file to be loaded. Note that the deprecated
      "elevationOverlay &lt;geoTiffName&gt; file &lt;geoTiffFile&gt;" commands
      are still supported.</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>geoTiff &lt;geoTiffName&gt; </para></entry>

              <entry><para>Specifies the name of the geoTIFF
              object.</para></entry>
            </row>

            <row>
              <entry><para>geoTiffFile &lt;geoTiffFile&gt; </para></entry>

              <entry><para>The image or elevation geoTIFF file to be overlaid
              on the terrain surface.</para><para>"sdt3d" will first attempt
              to open the file as specified e.g. as fully qualified, relative
              to the current directory, or in the current directory. If not
              found, it will search for the file in any path(s) previously
              specified with the sdt PATH command. Finally, it will look for
              the file in the same directory as the current input script (if
              any) ("sdt3d" only).</para></entry>
            </row>

            <row>
              <entry><para>delete geoTiff,&lt;geoTiffName&gt;</para></entry>

              <entry><para>Removes the specified geoTiff.<emphasis
              role="bold"/></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para/>
    </sect2>

    <sect2>
      <title id="tile">Tile Commands ("sdt3d" only)</title>

      <para>The tile command causes the specified image to be overlaid at the
      specified lat/lon coordinates.</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>tile &lt;tileName&gt; </para></entry>

              <entry><para>Specifies the name of the tile
              object.</para></entry>
            </row>

            <row>
              <entry><para>tileImage &lt;imageFile&gt; </para></entry>

              <entry><para>The image file to be overlaid on the terrain
              surface.</para><para>"sdt3d" will first attempt to open the
              imageFile as specified e.g. as fully qualified, relative to the
              current directory, or in the current directory. If not found, it
              will search for the file in any path(s) previously specified
              with the sdt PATH command. Finally, it will look for the file in
              the same directory as the current input script (if any) ("sdt3d"
              only).</para></entry>
            </row>

            <row>
              <entry><para>sector
              &lt;left&gt;,&lt;upper&gt;,&lt;right&gt;,&lt;lower&gt;</para></entry>

              <entry><para>The surface coordinates for the image
              file.</para></entry>
            </row>

            <row>
              <entry>tileLayer &lt;layerName&gt;</entry>

              <entry>Assigns the tile to the given layerName. If the layer
              does not already exist it will be created. See the layer section
              for more information.</entry>
            </row>

            <row>
              <entry><para>delete tile,&lt;tileName&gt;</para></entry>

              <entry><para>Removes the specified tile.<emphasis
              role="bold"/></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para/>
    </sect2>

    <sect2>
      <title id="tile">KML Commands ("sdt3d" only)</title>

      <para>The kml command causes the specified kml or kmz file to be
      loaded.</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>kml &lt;kmlName&gt; </para></entry>

              <entry><para>Specifies the name of the kml
              object.</para></entry>
            </row>

            <row>
              <entry><para>kmlFile &lt;kmlFileName&gt; </para></entry>

              <entry><para>The kml/kmz file to be overlaid on the terrain
              surface.</para><para>"sdt3d" will first attempt to open the
              kmlFile as specified e.g. as fully qualified, relative to the
              current directory, or in the current directory. If not found, it
              will search for the file in any path(s) previously specified
              with the sdt PATH command. Finally, it will look for the file in
              the same directory as the current input script (if any) ("sdt3d"
              only).</para></entry>
            </row>

            <row>
              <entry>kmlLayer &lt;layerName&gt;</entry>

              <entry>Assigns the kml to the given layerName. If the layer does
              not already exist it will be created. See the layer section for
              more information. (Note that all kml files are also assigned to
              the Sdt Kml Layer)</entry>
            </row>

            <row>
              <entry><para>delete kml,&lt;kmlName&gt;</para></entry>

              <entry><para>Removes the specified kml object.<emphasis
              role="bold"/></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para/>
    </sect2>

    <sect2>
      <title id="view">View Commands ("sdt3d" only)</title>

      <para>The kml command causes the specified kml or kmz file to be
      loaded.</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>view &lt;viewName&gt; </para></entry>

              <entry><para>Specifies the name of the view. This name that will
              be associated with the view in the bookmarks list on the
              bookmarks menu option. If the view xml file has already been
              loaded, the view will be set to the named view. </para><para>If
              the view xml file has not already been loaded, use the viewXml
              command to specify the view xml file. The viewXml command can
              also be used to associate a different file with the named
              view.</para></entry>
            </row>

            <row>
              <entry><para>viewXml &lt;viewXMLFileName&gt; </para></entry>

              <entry><para>Specifies the name of the view xml file saved via
              the "Bookmark this view" menu option. These files are saved in
              the users home directory although may be referenced in any
              location.</para><para>"sdt3d" will first attempt to open the
              viewFile as specified e.g. as fully qualified, relative to the
              current directory, or in the current directory. If not found, it
              will search for the file in any path(s) previously specified
              with the sdt PATH command. Finally, it will look for the file in
              the same directory as the current input script (if any) ("sdt3d"
              only).</para></entry>
            </row>

            <row>
              <entry><para>delete view,&lt;viewName&gt;</para></entry>

              <entry><para>Removes the specified view object.<emphasis
              role="bold"> </emphasis></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para/>
    </sect2>

    <sect2>
      <title id="popup">Popup Commands</title>

      <para>These commands are used to create "popup" windows which contain
      specified text content. The implementation of these commands is slightly
      different in "sdt" and "sdt3d".</para>

      <sect3>
        <title>"sdt" popup commands</title>

        <para>These commands are used to create, update, and destroy "popup"
        windows which contain specified text content. An example use of these
        windows is to provide some display of information upon
        &lt;doubleclick&gt; of a displayed node (Note this requires monitoring
        the stdout of "sdt" to learn of &lt;doubleclick&gt; events).</para>

        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry><para>popup &lt;windowName&gt; </para></entry>

                <entry><para>This specifies a popup window titled with the
                given &lt;windowName&gt;. The window is not displayed until
                its "content" is specified. </para></entry>
              </row>

              <row>
                <entry><para>content &lt;"contentText"&gt; </para></entry>

                <entry><para>This command specifies the content of the popup
                window. The content of window can be changed at any time. The
                content text should be enclosed in quotes.</para></entry>
              </row>

              <row>
                <entry><para>resize</para></entry>

                <entry><para>The resize command can be given with or without
                the "content" command, and results in the window being
                automatically resized to fit the current text.</para></entry>
              </row>

              <row>
                <entry><para>popdown &lt;windowName&gt;</para></entry>

                <entry><para>This command destroys the specified popup
                window</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>The following example illustrates the use of the "sdt" "popup"
        commands used in an input script:<programlisting>popup info content "The current time is 10:30AM "
wait 500
popup info content "The time is now 10:30AM plus 500 msec"
wait 5000
popdown info </programlisting></para>
      </sect3>

      <sect3>
        <title>"sdt3d" popup command</title>

        <informaltable frame="all">
          <tgroup cols="2">
            <tbody>
              <row>
                <entry><para>popup &lt;"contentText"&gt; </para></entry>

                <entry><para>This creates a popup window containing the
                associated text. The window will popdown when the user clicks
                on the windows ok button.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>
    </sect2>

    <sect2>
      <title>Miscellaneous Commands</title>

      <para>There are some additional commands provided for sdt
      operation.</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><para>backgroundColor &lt;color&gt;</para></entry>

              <entry><para>Changes the background color of the WWJ display.
              This is useful for non geocentric data visualizations
              particularly when the Worldwind layers are turned
              off.</para></entry>
            </row>

            <row>
              <entry><para>clear {all | nodes | sprites | symbols | links |
              labels | regions | tiles }</para></entry>

              <entry><para>This command deletes the specified object type.
              <emphasis>clear all</emphasis> will delete all sdt elements with
              the exception of the sprite table (Use <emphasis>delete all,all
              </emphasis>to also delete the sprite table). <emphasis>clear
              nodes</emphasis> will delete all nodes and their associated
              sprites, symbols, links, and labels. See the delete command to
              delete individual objects by name.</para></entry>
            </row>

            <row>
              <entry><para>defaultAltitudeType { msl | agl }</para></entry>

              <entry><para>This command will change the default altitude type
              (relative to the terrain or absolute) for location altitude
              settings. AGL is the system wide default
              altitude.</para><programlisting># Set the default altitude for all location 
# assignments to above ground level (relative 
# altitude)
defaultAltitudeType agl

# Set the default altitude for all location 
# assignments to mean sea level (absolute 
# altitude)
defaultAltitudeType msl</programlisting></entry>
            </row>

            <row>
              <entry><para>delete
              &lt;objectType|layer|all&gt;,&lt;objectName|&lt;layerName&gt;|all&gt;</para></entry>

              <entry><para>Deletes the object type or layer of the specified
              name. Object types that can be deleted include nodes, regions,
              links, and tiles. Sprites and symbols cannot be deleted by name.
              The all key word can be used to delete all objects of the given
              type. As opposed to the clear all command, "delete all,all" will
              delete the sprite table. </para><para>Note that deleting a layer
              will remove any related element associations and all associated
              elements will be redisplayed.</para><programlisting># Delete node "node01"
delete node,node01
delete node,"a node name"

# Delete region region01
delete region,region01

# Delete tile "antenna range overlay"
delete tile,"antenna range overlay"

# Delete link node01,node02,eth0
delete link,node01,node02,eth0

# Delete all sprites from the sprite table 
delete sprite,all

# Delete all object types
delete all,all

# Delete layer "myLayer"
delete layer,myLayer</programlisting></entry>
            </row>

            <row>
              <entry>elevationData [on|off]</entry>

              <entry>Toggles the elevation model on and off.</entry>
            </row>

            <row>
              <entry>flatEarth
              [on|mercator|sinusoidal|modsinusoidal|latLon|off],</entry>

              <entry>Toggles the globe projection between the various options.
              This is useful when visualizing non geocentric data. If
              unspecified the flat earth projection will default to
              latLon.<programlisting># Turn flat earth mode on (defaults to latLon)
flatEarth on

# Turn mercator flat earth mode on
flatEarth mercator

# Turn off flatEarth mode
flatEarth off</programlisting></entry>
            </row>

            <row>
              <entry>flyto
              &lt;lon&gt;,&lt;lat&gt;,&lt;alt&gt;[,&lt;heading&gt;[,&lt;pitch&gt;[,&lt;zoom&gt;]]]]</entry>

              <entry>This will "fly" to the specified coordinate and center
              the view around it. An "x" in an attribute will retain the
              current setting.</entry>
            </row>

            <row>
              <entry>follow &lt;on|off&gt;</entry>

              <entry>This command toggles follow node behavior on and off. It
              does not disable the settings for individual nodes. Use the
              "follow all,off" command to disable following on all nodes
              regardless of this global setting.</entry>
            </row>

            <row>
              <entry>follow
              [node,]&lt;nodeName|all&gt;[,&lt;on,off&gt;]</entry>

              <entry>This command will cause the view to be centered around
              the specified node or all nodes if the <emphasis>all</emphasis>
              keyword is specified. NOTE: Nodes assigned kml sprites cannot
              currently be followed. For example:<programlisting># center the view around node01
follow node01    

# the view will encompass all nodes
follow all 

# stop following all nodes
follow all,off

# stop following node01
follow node01,off</programlisting></entry>
            </row>

            <row>
              <entry>instance &lt;instanceName&gt;</entry>

              <entry>This command will change the application's command pipe
              name from the default of <emphasis>sdt</emphasis> to
              &lt;instanceName&gt;.</entry>
            </row>

            <row>
              <entry><ulink url="???"><link id="inputFile"
              linkend="inputFile">input
              &lt;fileName&gt;</link></ulink></entry>

              <entry>When specified on the command line or received over the
              command pipe, this command will load the specified
              &lt;inputFile&gt; and process the file in its entirety before
              loading any other input files. For example, all commands in the
              "spriteDefs" file will be loaded before the "script1" file is
              loaded.<programlisting>sdtcmd input spriteDefs input script1</programlisting><para>Note
              that <emphasis>input </emphasis>commands embedded
              <emphasis>within </emphasis>a script file will cause sdt to
              process the file in its entirety at the point the input command
              is encountered. For example:<programlisting>&lt;spriteDefs&gt;
def 1.1
def 1.2
def 1.3
&lt;/spriteDefs&gt;

&lt;script1&gt;

cmd 1.1
cmd 1.2

&lt;script2&gt;

cmd 2.1
cmd 2.2

&lt;/script2&gt;

cmd 1.3
cmd 1.4

&lt;/script1&gt;</programlisting></para><para>Note that when input files are
              loaded from the file menu, all previous sdt state will be
              cleared while input files loaded over the command pipe or via a
              command within an input script will not clear sdt
              state.</para></entry>
            </row>

            <row>
              <entry>layer &lt;layerName&gt;[,on|off]</entry>

              <entry>The layer command will create an empty "User Defined"
              layer that can then be subsequently associated with objects or
              object attributes. By default, the layer will be toggled on. See
              the <link linkend="layers">layers</link> section for more
              information.</entry>
            </row>

            <row>
              <entry><para>listen
              [udp,|tcp,][off|&lt;addr&gt;/]&lt;port&gt;</para><para>listen
              off</para></entry>

              <entry><para>Cause the "sdt3d" (only) application to listen to a
              udp or tcp socket on the specified port. Optionally a UDP
              multicast address may be specified. UDP is the default protocol
              if no protocol type is specified.</para><para>When the
              application is directed to listen to a socket, the protocol
              listen menu item will toggle to "&lt;protocol&gt; Off
              &lt;port&gt;". The "listen &lt;protocol&gt;,off" command or the
              "&lt;protocol&gt; Off &lt;port&gt;" menu item may be used to
              close the socket. "Listen Off" will close all
              sockets.</para><para>Note that only one UDP or TCP socket may
              currently be created, connections from multiple clients is
              supported.</para><para><programlisting># join multicast group 224.0.0.1/5000
listen 224.0.0.1/5000

# open a udp socket on port 5000
listen udp,5000

# open a udp socket on port 5000
listen 5000

# open a tcp socket on port 5000
listen tcp,5000

# close the udp socket
listen udp,off

# close the tcp socket
listen tcp,off

# close all sockets
listen off</programlisting></para></entry>
            </row>

            <row>
              <entry><para>log &lt;logFile|off&gt;</para></entry>

              <entry><para>Turns on debug logging to &lt;logFile&gt;. Entering
              "log off" turns off file logging so that it reverts back to
              stderr. </para><programlisting>log errlog.txt</programlisting></entry>
            </row>

            <row>
              <entry><para>lookAt
              &lt;lon&gt;,&lt;lat&gt;,&lt;alt&gt;[,&lt;heading&gt;[,&lt;tilt&gt;[,&lt;range&gt;]]]</para></entry>

              <entry><para>This command sets the camera position. The
              attributes correspond roughly to the KML "LookAt" element.
              </para><para>The &lt;lon&gt;,&lt;lat&gt;,&lt;alt&gt; attributes
              set the camera center position. (Cartesian coordinate support is
              not available for the lookAt
              command)</para><para>&lt;heading&gt; sets the direction (e.g.
              north, south, east, west) in degrees. Values range from 0 to 360
              degrees with 0 being north.</para><para>&lt;tilt&gt; is the
              angle between the direction of the lookAt position and the
              normal to the surface of the earh. Values range from 0 to 90
              degrees. A &lt;tilt&gt; value of 0 degrees set the view directly
              above. A &lt;tilt&gt; of 90 degrees indicates viewing along the
              horizon.</para><para>&lt;range&gt; is the distance in meters
              from the point specified by
              &lt;lon&gt;,&lt;lat&gt;,&lt;alt&gt;</para><para>Note that the
              altitudeMode attribute is not currently supported. An "x" in an
              attribute will retain the current setting.</para></entry>
            </row>

            <row>
              <entry><para>path
              "&lt;directoryPath&gt;;&lt;directoryPath&gt;:"</para></entry>

              <entry><para>This command sets a directory path to be searched
              for sdt sprite images, tiles, input files, etc. Each path should
              be delimited by ";" in a Windows environment. Either ";" or ":"
              may be used in a *nix environment. The entire path must be
              included in quotes (") if spaces exist in the path
              e.g.</para><programlisting>path "/Documents and Settings;/Documents and Settings/A directory/;"</programlisting></entry>
            </row>

            <row>
              <entry><para><link id="origin" linkend="origin">origin</link>
              &lt;lat&gt;,&lt;lon&gt;[,&lt;alt&gt;]</para></entry>

              <entry>Sets the geodesic origin point to be used as the offset
              point for any subsequent cartesian positions.</entry>
            </row>

            <row>
              <entry><para>reset</para></entry>

              <entry>Cause the "sdt3d" application to reset all system state
              (including clearing the sprite table and the configuration file)
              and loads any user preferences file. Any input file processing
              will be halted and any listening sockets will be closed.</entry>
            </row>

            <row>
              <entry><para>status "&lt;theStatus&gt;"</para></entry>

              <entry><para>This command sets the status content to the text
              enclosed in quotes. Usage:</para><programlisting>status "A status update"</programlisting></entry>
            </row>

            <row>
              <entry><para>stereo [on|off]</para></entry>

              <entry><para>Toggles analglpyh stero mode on and off. (Creates a
              stereoscopic 3D visualization effect).</para></entry>
            </row>

            <row>
              <entry><para>symbolOffset [on|off]</para></entry>

              <entry><para>Enabling symbol offset will center the symbol
              around the node's sprite center rather than around the actual
              node position point. (Icon images are positioned at node
              position at image center bottom and so the symbol may not fully
              "hug" the icon when symbol offset is not
              enabled.)</para></entry>
            </row>

            <row>
              <entry><para>title "&lt;theTitle&gt;"</para></entry>

              <entry><para>This command sets the title of the main sdt window
              to the text enclosed in quotes. Usage:</para><programlisting>title "A main window title"</programlisting></entry>
            </row>

            <row>
              <entry><para>userConfigFile &lt;fileName&gt;</para></entry>

              <entry><para>This command will load the given file. The file
              will subsequently be the associated <link
              linkend="userConfigurationFile">userConfigurationFile</link>.</para><programlisting>title "A main window title"</programlisting></entry>
            </row>

            <row>
              <entry><para>wait &lt;msec&gt;</para></entry>

              <entry><para>When this command is encountered in the input, sdt
              will pause for the number of milliseconds indicated by
              &lt;msec&gt; before processing other commands in the input.
               This allows self-contained animations to be created using the
              sdt script format.  Cheesy sdt animation script
              example:<programlisting>bgimage roadmap.jpg
bgbounds 0,0,100,100
sprite Car image car.png
node alpha type Car position 10,10
wait 200
node Car position 10,20
wait 200
node Car position 10,30</programlisting></para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para/>
    </sect2>
  </sect1>

  <sect1>
    <title>Examples</title>

    <para>Sample scripts and icons are available in the /sdt/examples
    subdirectory.</para>

    <sect2>
      <title>"sdt3d" Example Script</title>

      <para>This is a simple script to illustrate the use of "sdt3d":</para>

      <para><programlisting>path "/Documents and Settings/nrl/My Documents/sdt3d/examples/:/cygwin/home/nrl/sdt3d/examples/:"

bgbounds -77.028633,38.828533,-77.003298,38.817720
sprite helo image helo.png size 105,43
sprite truck image truck.png size 50,25
sprite uav image uav.png size 72,20
sprite warrior image warrior/warrior.3ds size 32,32 length 32
#
region region01 center -77.025146,38.822059 shape circle,blue,300

node m1-xcom type helo label cyan symbol sphere
node m1-node01 type truck 
node m1-node02 type uav label cyan
node m1-node03 type warrior label cyan

status "GMT&gt;15:53:57"
node m1-xcom position -77.005342,38.818870,900.000000 label cyan
node m1-node01 position -77.005620,38.825368,0.000000 
node m1-node02 position -77.009610,38.828472,400.000000 label cyan
node m1-node03 position -77.019179,38.824029,0.000000 label cyan

wait 50.0

status "GMT&gt;15:54:37"
node m1-xcom position -77.005342,38.818870,900.000000 label cyan
node m1-node01 position -77.005620,38.825368,0.000000 
node m1-node02 position -77.009610,38.838472,400.000000 label cyan
node m1-node03 position -77.019179,38.834029,0.000000 label cyan</programlisting></para>
    </sect2>

    <sect2>
      <title>"sdt" Example Script</title>

      <para>This is a simple script to illustrate the use of "sdt":</para>

      <para><programlisting>bgimage roadmap.jpg
bgbounds 0,0,100,100
sprite Car image car.png
node alpha type Car pos 10,10
node beta type Car pos 10,20
node gamma type Car pos 10,30
link alpha,beta
link beta,gamma
wait 500
node alpha pos 20,10
node beta pos 20,20
wait 500
node alpha pos 30,10
node beta pos 30,20
wait 500
unlink beta,gamma</programlisting></para>

      <para>Assuming the script is stored in a file named "script.sdt", "sdt"
      can be launched with either:</para>

      <para><programlisting>cat script.sdt | sdt</programlisting></para>

      <para>or</para>

      <para><programlisting>sdt input script.sdt</programlisting></para>

      <para>to execute the given set of commands.  When input commands are
      piped into the "sdt" stdin input, the sdt wait command will generally
      not need to be used if the program providing the input to sdt is
      providing the commands on a realtime basis.  This makes "sdt"
      appropriate for realtime visualization given an appropriate controlling
      program or shell script.</para>
    </sect2>
  </sect1>

  <sect1 id="SDTOutputFormat">
    <title>"sdt" Only Functionality</title>

    <para>This section is relevant to "sdt" only.</para>

    <sect2>
      <title>Popups</title>

      <para>When a popup window is closed by the user, the following message
      is printed to stdout:</para>

      <para><programlisting>popdown &lt;windowName&gt; </programlisting></para>

      <para>If a live program is controlling "sdt"'s input (as is often the
      case for popups), it should pay attention to this message, and stop
      sending any more "popup" commands for that window (e.g. if the window is
      being updated live). If this is not done properly, then a subsequent
      "popup" command will recreate the window that the user just closed. If a
      window is being updated live by a timer, etc., it's a good idea to go
      ahead and re-send "sdt" the "popdown" command to make sure the window
      stays closed in case another popup message has been issued after the
      user closed the popup window.</para>
    </sect2>

    <sect2>
      <title>Mouse Operations</title>

      <para>You may do a variety of mouse operations in order to output
      messages that may be fed into another program. First, double-clicking
      the left mouse button on any node will print a simple message to stdout.
      The message format is as follows:</para>

      <para><programlisting>node &lt;node_name&gt; doubleclick </programlisting></para>

      <para>Additionally, holding down the shift key while left-clicking a
      node or position within "sdt" will print another message to stdout, with
      the coordinate system position of mouse cursor, and an optional node
      name and position (if a node was clicked). The message format for this
      is as follows:</para>

      <para><programlisting>shiftclick position &lt;x&gt;,&lt;y&gt; [node &lt;node_name&gt; nodeposition &lt;x&gt;,&lt;y&gt;]</programlisting></para>
    </sect2>

    <sect2>
      <title>Background Resizing Options</title>

      <para>Under the Options folder of the Menu bar, you can select one of
      two options for resizing your background image. The Auto-Size selection
      maximizes the background to the window while keeping the original
      dimensions. The Fill Window selection will stretch the background image
      to fully match the size of the window. You can also resize the
      background anytime by using the hot key commands:</para>

      <para>CTRL-F for Fill Window (was CTRL-A in 1.0aX, but had to be changed
      for MacOS)</para>

      <para>CTRL-S for Auto-Size (preserves image aspect ratio)</para>

      <para>You may also resize the background by zooming in and out. This is
      done by holding the left or right mouse button down and dragging up and
      down.</para>
    </sect2>

    <sect2>
      <title>Miscellaneous Options/Shortcuts</title>

      <para>Holding down CTRL and clicking the mouse on the "sdt" window will
      center the image. CTRL-P will save the current contents of the "sdt"
      window in PNG format to a file called "sdt-(sequence number).png" in the
      directory "sdt" was started from. The sequence number in the file name
      is padded with zeros to 4 digits, and is reset every time "sdt" is
      restarted, so be careful, or you will overwrite your captured files!
      This feature is also available under "Capture Screen" in the Options
      menu.</para>
    </sect2>
  </sect1>
</article>
